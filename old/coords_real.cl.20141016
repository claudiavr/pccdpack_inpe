############
# Victor Magalhaes 20/09/2011
# Padronizar a fabricação dos catalogos
#################################################################
# Retiradas as opcoes de colocar a escala de placa e tamanhos da imagem de referencia
# Agora eles sao pegos do header da imagem de referencia
# 30/09/2011
##################################################################


procedure coords_real

string 	objeto			{prompt="Nome do objeto (raiz dos nomes)"}
string 	referencia     	{prompt="Imagem de referencia"}
string 	imgccd			{prompt="Imagem CCD"}
#real  	espref        	{prompt="Escala de placa da referencia (arcsec/pixel) "}
real   	espccd        	{prompt="Escala de placa da CCD (arcseg/pixel) "}
#real  	xtamref      	{prompt="Tamanho da referencia em x (pixels)"}
#real   ytamref      	{prompt="Tamanho da referencia em y (pixels)"}
real   	xtamccd        	{prompt="Tamanho da CCD em x(pixels)"}
real   	ytamccd      	{prompt="Tamanho da CCD em y(pixels)"}
string 	norde       	{enum="right|left|top|bottom", prompt="Direcao do norte na CCD"}
string 	ost        		{enum="right|left|top|bottom", prompt="Direcao do leste na CCD"}
real   	inclina = 0    	{prompt="angulo entre o eixo e o sistema equatorial?"}
bool   	recentra   		{prompt="recentraliza as estrelas?"}
real   	centrobox = 5   {prompt="centering box width in scale units"}


struct *flist1
struct *flist2

begin

string temp1, temp2, scontinua, lixo, linedataref, linedataccd, refcoo, ccdcoo, check
bool bb,prossegue
real xref,yref,xccd,yccd,lixo2,espref,xtamref,ytamref
int nlin,alterpar, continua
struct line1, line2
	
	
	package | grep stsdas | scan(check)
	package | grep apphot | scan(check)
	
	
	if(check=="stsdas") print("apphot nao carregado, carregar e tentar de novo")
	if(check=="apphot"){
	
	print("achei apphot!!!")
	hselect(referencia,fields="CDELT2",expr=yes) | scan(espref)
	hselect(referencia,fields="crpix1",expr=yes) | scan(xtamref)
	hselect(referencia,fields="crpix2",expr=yes) | scan(ytamref)
	espref = espref * 3600
	xtamref = (xtamref-0.5) * 2
	ytamref = (ytamref-0.5) * 2
#	print(espref)
#	print(xtamref)
#	print(ytamref)	
	alterpar = 10
	continua = 0
	display(referencia, frame=1)
	display(imgccd, frame=2)
	tvmark(2, objeto//".sel")
	if(norde == "right" && ost == "bottom"){
		print("")
		print("No frame 2:")
		print("Inverta <y> e faca uma rotacao de 90 graus")
		print("")
	}
	if(norde == "top" && ost == "right"){
		print("")
		print("No frame 2:")
		print("Inverta <x>")
		print("")
	}
	print("Ache uma mesma estrela nos dois campos")
	print("Que esteja marcada no frame 2")
	print("quando achar escreva continua")
	print("Para sair digite sair")

	while(continua == 0){
		lixo=scan(scontinua)
		if(scontinua == "continua") continua = 1
		if(scontinua == "sair") continua = 2
	}
	if(continua == 1){
	bb=no
	while(bb == no){
		display(referencia, frame=1)
		temp1 = mktemp("tmp$coords")
		print("")
		print("Marque a estrela na imagem de referencia")
		print("Use <a> para marcar e <q> para sair")
		print("")
		daoedit(referencia, > temp1//"")
		#type temp1//""
		flist1=temp1
		nlin=0
		while (fscan(flist1,line1) != EOF) {
			nlin=nlin+1
			if (nlin==3){
				linedataref=fscan(line1, xref, yref)
			}
		}
		refcoo = mktemp("tmp$coords")
		print(xref,yref,> refcoo)
		tvm(1,refcoo)
		print("Coordenadas da estrela")
		print(xref,yref)
		print("")
		print("Esta correta a estrela no tvmark? (yes|no)")
		lixo=scan(bb)
	}
	bb=no
	while(bb == no){
		display(imgccd, frame=2)
		tvmark(2, objeto//".sel")
		temp2 = mktemp("tmp$coords")
		print("")
		print("Marque a mesma estrela na imagem CCD")
		print("Marque o objeto do par que se encontra marcado.")
		print("Use <a> para marcar e <q> para sair")
		print("")
		daoedit(imgccd, > temp2//"")
		#type temp2//""
		flist2=temp2
		nlin=0
		while (fscan(flist2,line2)!= EOF) {
			nlin=nlin+1
			if (nlin==3){
				linedataccd=fscan(line2, xccd, yccd)
			}
		}
		ccdcoo = mktemp("tmp$coords")
		print(xccd,yccd,> ccdcoo)
		print("Coordenadas da estrela")
		print(xccd,yccd)
		display(imgccd, frame=2)
		tvm(2,ccdcoo)
		print("")
		print("Esta correta a estrela no tvmark? (yes|no)")
		lixo=scan(bb)
	}
	bb=no
	while(bb ==  no){
		unlearn refer_inpe
		refer_inpe.epimg = espref
		refer_inpe.epccd	= espccd
		refer_inpe.ximagem = xtamref
		refer_inpe.yimagem = ytamref
		refer_inpe.xside = xtamccd
		refer_inpe.yside = ytamccd
		refer_inpe.norte = norde
		refer_inpe.leste = ost
		refer_inpe.incli = inclina
		refer_inpe.recen = recentra
		refer_inpe.imgrefer = referencia
		refer_inpe.cbox = centrobox
		refer_inpe(file_sel=objeto//".sel",file_txt=objeto//".txt",xo=xref,yo=yref,xoi=xccd,yoi=yccd)
		displa(imgccd,frame=2)
		tvmark(2, objeto//".sel")
		displa(referencia,frame=1)
		tvmark(1, objeto//".txt")
		print("")
		print("Confira as marcacoes na imagem de referencia")
		print("Se estiverem corretas digite yes")
		lixo=scan(bb)
		if(bb == no){
			prossegue = no
			while(prossegue == no){
				print("")
				print("O que deseja fazer?")
				print("Para sair, digite 0")
				print("Para alterar a escala de placa da referencia, digite 1")
				print("Para alterar a escala de placa da ccd, digite 2")
				print("Para alterar os parametros de centragem digite 3")
				lixo=scan(alterpar)
				if(alterpar == 0){
					prossegue = yes
					bb = yes
				}
				if(alterpar == 1){
					print("")
					print("Escala de placa atual:")
					print(espref)
					print("Nova escala de placa da referencia")
					lixo=scan(espref)
				}
				if(alterpar == 2){
					print("")
					print("Escala de placa atual:")
					print(espccd)
					print("Nova escala de placa da ccd")
					lixo=scan(espccd)
				}
				if(alterpar == 3){
					print("")
					print("Recentra? (yes|no)")
					lixo=scan(recentra)
					if(recentra){
						print("")
						print("Caixa de centragem atual:")
						print(centrobox)
						print("Nova caixa de centragem")
						lixo=scan(centrobox)
					}
				}
				if(alterpar != 0){
					print("")
					print("Prossegue com o novo refer? (yes|no)")
					lixo=scan(prossegue)
				}
			}
		}
	}
	if(alterpar != 0){
		fintab_sopol(file_txt=objeto//".txt",file_img=referencia,file_out=objeto)
		print("")
		print("Carregue ",objeto,".ftb no aladin junto com ",referencia," e o filtro adequado para polarizacao")
		print("Saia do apphot para evitar conflitos com as outras rotinas do inpepackage")
	}
	coords_real.espccd = espccd #????
#	coords_real.espref = espref
	coords_real.centrobox = centrobox
	delete(temp1, ver-)
	delete(temp2, ver-)
	delete(refcoo, ver-)
	delete(ccdcoo, ver-)
	}
	}

end